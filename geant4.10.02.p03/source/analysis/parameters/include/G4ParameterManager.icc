//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id: G4ParameterManager.hh 70604 2013-06-03 11:27:06Z ihrivnac $

#include <tools/cids>

//_____________________________________________________________________________
template <typename T> 
void  G4ParameterManager::CreateParameter(
  const G4String& name, T value, G4MergeMode mergeMode)
{
  G4VParameter* parameter = new G4Parameter<T>(name, value, mergeMode);
  fMap[name] =  parameter;
  fParametersToDelete.push_back(parameter);
}

//_____________________________________________________________________________
template <typename T> 
void  G4ParameterManager::RegisterParameter(G4Parameter<T>& parameter)
{
  fMap[parameter.GetName()] = &parameter;
}

//_____________________________________________________________________________
template <typename T> 
G4Parameter<T>*  
G4ParameterManager::GetParameter(const G4String& name, G4bool warn) const
{
  // get G4VParammeter from the map
  auto parameter = GetParameter(name, warn);
  if ( ! parameter ) return 0;

  // check type
  G4Parameter<T>* tparameter = dynamic_cast<G4Parameter<T>*>(parameter); 
  if ( ! tparameter ) {
    G4ExceptionDescription description;
    description << "      " << "parameter " << name << " has different type";
    G4Exception("G4ParameterManager::GetParameter<T>", 
                "Analysis_W011", JustWarning, description);
    return 0;
  }

  return tparameter;
}

